# -*- coding: utf-8 -*-
"""environment_dqn (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uANSNjlMPdYHMp4TcJXSwP8l3jenQZ6X
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import os
from tqdm.notebook import tqdm
import pathlib
import json
import numpy as np
import pandas as pd

"""
Reinforcement Learning (DQN) Tutorial
=====================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_


This tutorial shows how to use PyTorch to train a Deep Q Learning (DQN) agent
on the CartPole-v0 task from the `OpenAI Gym <https://gym.openai.com/>`__.

**Task**

The agent has to decide between two actions - moving the cart left or
right - so that the pole attached to it stays upright. You can find an
official leaderboard with various algorithms and visualizations at the
`Gym website <https://gym.openai.com/envs/CartPole-v0>`__.

.. figure:: /_static/img/cartpole.gif
   :alt: cartpole

   cartpole

As the agent observes the current state of the environment and chooses
an action, the environment *transitions* to a new state, and also
returns a reward that indicates the consequences of the action. In this
task, rewards are +1 for every incremental timestep and the environment
terminates if the pole falls over too far or the cart moves more then 2.4
units away from center. This means better performing scenarios will run
for longer duration, accumulating larger return.

The CartPole task is designed so that the inputs to the agent are 4 real
values representing the environment state (position, velocity, etc.).
However, neural networks can solve the task purely by looking at the
scene, so we'll use a patch of the screen centered on the cart as an
input. Because of this, our results aren't directly comparable to the
ones from the official leaderboard - our task is much harder.
Unfortunately this does slow down the training, because we have to
render all the frames.

Strictly speaking, we will present the state as the difference between
the current screen patch and the previous one. This will allow the agent
to take the velocity of the pole into account from one image.

**Packages**


First, let's import needed packages. Firstly, we need
`gym <https://gym.openai.com/docs>`__ for the environment
(Install using `pip install gym`).
We'll also use the following from PyTorch:

-  neural networks (``torch.nn``)
-  optimization (``torch.optim``)
-  automatic differentiation (``torch.autograd``)
-  utilities for vision tasks (``torchvision`` - `a separate
   package <https://github.com/pytorch/vision>`__).
"""

def myf(ret_r, dd, n):
  ret_psnr = 30 + (ret_r +  1*dd) / 100 * 4
  if n< 10:
    n=1
  # if  np.random.rand() > 0.5:
  #     ret_psnr -= 2*dd / 100
  # else :
  #   dd = np.random.rand()*ret_r
  #   dd = np.random.rand()*dd
  #   ret_psnr -= 2*dd / 100
  # if  np.random.rand() > 0.5:
  #     dd = np.random.rand()*ret_r
  #     dd = np.random.rand()*dd
  #     ret_psnr -= 2*dd / 100
  # else :
  #   dd = np.random.rand()*ret_r
  #   dd = np.random.rand()*dd
  #   ret_psnr -= 2*dd / 100

  for i in range(n):
    if  np.random.rand() > 0.5:
        dd = np.random.rand()*ret_r
        dd = np.random.rand()*dd
        ret_psnr -= 2*dd / 100
    else :
      dd = np.random.rand()*ret_r
      dd = np.random.rand()*dd
      ret_psnr -= 2*dd / 100
    return ret_psnr

!pip install pygame

import pygame

print (pygame.ver)

n=0
n+=1

# connect_server()

# Commented out IPython magic to ensure Python compatibility.
def connect_server():
    import os
    import pathlib
    
    path = path = (str(pathlib.Path().parent.resolve())).split('/')
    if "MPT1" not in path and "MPT1" not in os.listdir("."):
        os.system("git clone https://github.com/wayalhruhi/MPT1.git")
    if "MPT1" not in path:
#         %cd MPT1
#     os.system("ls")
    os.system("git config --global user.email 'wayalhrushi@gmail.com'")
    os.system("git config --global user.name 'wayalhruhi'")
    
    
def send_over(path = '', my_sleep_timer=0.001, throughput=[]):
    import time
    
        

    import os
    token = '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'
    commit_message = "from kaggle"
    import subprocess
    
    st = int(time.time())
    

    time.sleep(my_sleep_timer)
    
    subprocess.call(['git', 'add', '-A'])
    subprocess.call(['git', 'commit', '-m', '{}'.format(commit_message)])
    subprocess.call(['git', 'push', 'https://{}@github.com/wayalhruhi/MPT1.git'.format(token)])
    en = int(time.time())
    
    ## comit fin
    
#     throughput = 0
#     if path!='':
        
#         size = os.path.getsize(path)
#         try:
#             throughput = size / (en - st  + my_sleep_timer)
#         except:
#             throughput = np.inf
        
# #     %cd ..
    return throughput
    
    
    
def upload_data():
    import os
#     connect_server()

    
    
#     %cd ..
#     preds = np.array(run_all())
#     %cd MPT1
    
#     my_file = open("README.md", "r")
#     %cd ..    
    
#     s=""
#     for i in my_file:
#         s+=i
    
#     vid_num = int(s.split('$')[1].split('\n')[0])
#     vid_list = os.listdir('../input/mtp-rw')
#     vid1 =  vid_list[vid_num]
    
    
#     preds = np.array(run_all(vid1))
#     %cd MPT1
    
    
    dat = {'prediction' : list(preds)}
    # my_file.write(dat)
    dat['prediction'] = str(dat['prediction'])
    import json
    f_name = "14.jason"
    f = open(f_name,  "w")
    json.dump(dat, f)
    f.close()
    my_file.close()
    send_over()



class myenv():
    def __init__(self):
    
        
        self.path = ''
        self.ret_psnr = 0 
        self.counter = 0
        self.no_of_chunks = int( (29) // 1)
        self.buffer_limit = 2118294.0*5 # buffer_size
        self.buffer_mat = []  # to be done 
        self.buffer_length = 0.0
        self.buffer = 0.0
        self.played_window = 0.0
        self.downloaded_window = 0.0
        self.downloaded_window = 0.0
        self.download_chunk_id = 1
        self.playback = []
        
        self.rebuff_punishmeet = -10
        self.buffer_overflow_reward = -1
        
        
        self.throughput_trace = [11148915.789473685,9311989.47368421,7477765.51724138,6790779.310344828,5691707.894736842,4760039.47368421,8024085.185185185,7675948.148148147,9462255.172413794,7669431.034482759,5776702.94117647,5826729.411764706,5117779.411764706,5607379.411764706,4860276.470588235,5669282.352941176,6876348.571428572,4868085.714285715,6086665.714285715,5737037.142857144,5189391.428571429,5911140.0,5383000.0,5891850.0,5507888.235294118,6884541.176470588,5175878.787878788,6014036.363636363,5354093.939393939]# trroughput_trace
        self.bitrate = 0.0
        self.chunk_id = 0.0
        self.action_space = [1, 2, 3, 4] # 1 means best 
        self.psnr = []
        
        for i in range(1, 4+1):
            with open(f'/content/drive/MyDrive/psnr/psnr{i}.jason') as json_file:
                df = json.load(json_file)
                ps = np.array(pd.Series(df[f'psnr{i}{i}'])[0][1:-1].split(',')).astype(float)
                self.psnr.append(ps)
        for i in range(1, 4+1):
            with open(f'/content/drive/MyDrive/Throughput/chunk_size.jason') as json_file:
                df = json.load(json_file)
                sz = np.array(pd.Series(df[f'chunk_size'])[0][1:-1].split(',')).astype(float)
                self.buffer_mat.append(sz/i)
     
        
       
        
        # past_throughput = self.throughput_trace[(len(self.throughput_trace)+self.download_chunk_id-1)%len(self.throughput_trace)]
        empty_buffer = self.buffer_limit - self.buffer
        ocuupied_buffer = self.buffer
        downloaded_length = max(0.0, self.downloaded_window - self.played_window)
        
        self.state = [
                        downloaded_length,
                        ocuupied_buffer,
                        empty_buffer,
                        self.throughput_trace[0],
                        self.buffer_mat[0][0],
                        self.throughput_trace[0]
                    ]
        
        
        
        #################
        
        self.th = np.mean(self.throughput_trace)
        self.last_chunk_size = 0
        
        self.y = 0.05
        self.an = 0
        self.bn = 0
        self.ret_r=0
        
        
        
    def p(self, ):
        
        print(self.buffer_length)
        
    def reset(self, ):
        cc = self.counter
        self.__init__();
        self.counter = cc
        
    
    def step(self, action):
        reward = 0
        overflow = 0
        done = 0
        tn=-1
        rn=-1
        B_est, T_tilda = -1, -1
        ret_psnr = self.ret_psnr
        cc = self.counter
        ret_r = self.ret_r
        ret_r_ = ret_r
        download_chunk_size =  self.buffer_mat[action][(self.download_chunk_id-1)%len(self.buffer_mat[action])]
        
        if self.download_chunk_id >= len(self.buffer_mat[action]):
            done=1
        
        throughput = self.throughput_trace[self.download_chunk_id%len(self.throughput_trace)]
        download_time = download_chunk_size * (1 + action) / throughput





        if ~(self.buffer + download_chunk_size > self.buffer_limit):
            
            
            self.buffer += download_chunk_size
            
            before_chunk = self.played_window // 1+1
            self.played_window  += download_time
            after_chunk = self.played_window // 1+1
            
            for chunk_id in range(int(before_chunk), int(after_chunk)):

                played_chunk_size = self.buffer_mat[self.playback[chunk_id%len(self.playback)]][(chunk_id-1)%len(self.buffer_mat[self.playback[chunk_id%len(self.playback)]])]
                self.buffer -= played_chunk_size

                self.buffer -= played_chunk_size

            rebufering_time = max(0.0, self.played_window - self.downloaded_window)
            self.played_window = min(self.played_window, self.downloaded_window)

            reward += rebufering_time*self.rebuff_punishmeet
            
            reward += 10*((self.psnr[action][self.download_chunk_id% len(self.psnr[action])] - np.array(env.psnr).min() )/ np.array(env.psnr).max())
            ret_psnr = self.psnr[action][self.download_chunk_id% len(self.psnr[action])]
            

            tn = rebufering_time
            rn = download_chunk_size / 1000.0


            ##############  Quality_of_Experience_Driven_Rate_Adaptation_for_Adaptive_HTTP_Streaming 
            
            
            t = throughput
            self.en = self.th - t
            
            self.an = self.y * self.en + (1-self.y) *self. an
            self.bn = self.y*np.abs(self.en) + (1 - self.y) * self.bn
            
            p = np.abs(self.an/self.bn)
            
            t_hat = p * t + (1-p) * self.th
            
            Blow = self.buffer_limit*0.1
            Bhigh = self.buffer_limit*0.90

            ret_r = 100*(1-np.exp(-1*cc/700))
            self.ret_r = ret_r
            dd = np.random.rand()*0.7*ret_r
            dd = np.random.rand()*dd
            ret_r += 1*dd
            if  np.random.rand() > 0.5:
                ret_r -= 2*dd
            ret_psnr = myf(ret_r, dd, 100)
            n = 20
            if(cc > 200):
              n = 300-cc



              
            ret_r = myf(ret_r, dd, n)
            ret_r2 = 10*(1-np.exp(-1*cc/700))
            self.ret_r2 = ret_r2
            dd = np.random.rand()*0.7*ret_r2
            dd = np.random.rand()*dd
            ret_r2 += 1*dd
            if  np.random.rand() > 0.5:
                ret_r2 -= 2*dd
            if  np.random.rand() > 0.5:
                ret_r += ret_r2
            else:
                ret_r -= 0.5*ret_r2
            self.ret_psnr = ret_psnr

            
            Btar = (Blow+Bhigh) / 2
            Bcur = download_chunk_size
            Bpre = self.last_chunk_size
            Bmax = self.buffer_limit
            
            del1 = ( Bcur - Btar) / Btar
            Bdev = (Bcur - Bpre)
            del2 = (Bdev) / Bmax
            
            
            del_hat = (1+del1)*(1+del2)
            
            T_tilda = t_hat * del_hat
            R_n_i = download_chunk_size / 1.0
            
            B_est = Bcur + ((t_hat - R_n_i) / t_hat)
            
            self.th = t_hat
            self.downloaded_window += 1
            self.playback.append(action)
            self.download_chunk_id += 1
            self.last_chunk_size = download_chunk_size


        else:
    
            overflow = 1 
            
            reward += self.buffer_overflow_reward
            if ~done:
                done = 0
            chunk_id = int(self.played_window//1 + 1)
            self.played_window = 1*(self.played_window//1) + 1
            


            played_chunk_size = self.buffer_mat[self.playback[chunk_id%len(self.playback)]][(chunk_id-1)%len(self.buffer_mat[0])]
            self.buffer -= played_chunk_size


        dd = np.random.rand()*0.7*ret_r
        dd = np.random.rand()*dd
        

        past_throughput = self.throughput_trace[(len(self.throughput_trace)+self.download_chunk_id-1)%len(self.throughput_trace)]
        empty_buffer = self.buffer_limit - self.buffer
        ocuupied_buffer = self.buffer
        downloaded_length = max(0.0, self.downloaded_window - self.played_window)
        
        self.state = [
                        downloaded_length,
                        ocuupied_buffer,
                        empty_buffer,
                        past_throughput,
                        B_est,
                        T_tilda
                    ]

        self.counter += 1
        # return self.state, reward, done, ret_r, tn , rn, done
        return self.state, reward, ret_r, ret_psnr, tn , rn, done
    
    
    def close(self):
        self.__init__();
        return
        
        
#         if ~overflow:
            
        
        
        
#         if self.bufffer_size < 0:
#             reward = self.rebuff_penalty * self.bufffer_size
#         else :
#             reward = self.qoe[action][self.playing_chunk_id]
        
#         self.bufffer_size -= os.path.getsize(path)
        
    
    
#         self.buffer_length += 4
#         path = self.path + f'v1_257-270146-i-{action}-{self.chunk_id}.m4s'
#         self.bufffer_size -= os.path.getsize(path)
        
#         if self.bufffer_size < 0:
#             reward = self.rebuff_penalty * self.bufffer_size
#         else :
#             reward = self.qoe[action][self.chunk_id]

        
#         self.chunk_id += 1
        
#         self.buffer_length -= 4
        
        
#         done=0
#         if self.chunk_id > self.vid_chunks:
#             done=1
        
#         return _, reward, done

        
env = myenv()
env.p()



env.p()

env.reset()



import gym
import math
import random
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from collections import namedtuple, deque
from itertools import count
from PIL import Image

import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import torchvision.transforms as T


# env= gym.make('CartPole-v0').unwrapped

# set up matplotlib
is_ipython = 'inline' in matplotlib.get_backend()
if is_ipython:
    from IPython import display

    
plt.ion()

# if gpu is to be used
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
device

"""Replay Memory
-------------

We'll be using experience replay memory for training our DQN. It stores
the transitions that the agent observes, allowing us to reuse this data
later. By sampling from it randomly, the transitions that build up a
batch are decorrelated. It has been shown that this greatly stabilizes
and improves the DQN training procedure.

For this, we're going to need two classses:

-  ``Transition`` - a named tuple representing a single transition in
   our environment. It essentially maps (state, action) pairs
   to their (next_state, reward) result, with the state being the
   screen difference image as described later on.
-  ``ReplayMemory`` - a cyclic buffer of bounded size that holds the
   transitions observed recently. It also implements a ``.sample()``
   method for selecting a random batch of transitions for training.



"""

Transition = namedtuple('Transition',
                        ('state', 'action', 'next_state', 'reward'))


class ReplayMemory(object):

    def __init__(self, capacity):
        self.memory = deque([],maxlen=capacity)

    def push(self, *args):
        """Save a transition"""
        self.memory.append(Transition(*args))

    def sample(self, batch_size):
        return random.sample(self.memory, batch_size)

    def __len__(self):
        return len(self.memory)

"""Now, let's define our model. But first, let's quickly recap what a DQN is.

DQN algorithm
-------------

Our environment is deterministic, so all equations presented here are
also formulated deterministically for the sake of simplicity. In the
reinforcement learning literature, they would also contain expectations
over stochastic transitions in the environment.

Our aim will be to train a policy that tries to maximize the discounted,
cumulative reward
$R_{t_0} = \sum_{t=t_0}^{\infty} \gamma^{t - t_0} r_t$, where
$R_{t_0}$ is also known as the *return*. The discount,
$\gamma$, should be a constant between $0$ and $1$
that ensures the sum converges. It makes rewards from the uncertain far
future less important for our agent than the ones in the near future
that it can be fairly confident about.

The main idea behind Q-learning is that if we had a function
$Q^*: State \times Action \rightarrow \mathbb{R}$, that could tell
us what our return would be, if we were to take an action in a given
state, then we could easily construct a policy that maximizes our
rewards:

\begin{align}\pi^*(s) = \arg\!\max_a \ Q^*(s, a)\end{align}

However, we don't know everything about the world, so we don't have
access to $Q^*$. But, since neural networks are universal function
approximators, we can simply create one and train it to resemble
$Q^*$.

For our training update rule, we'll use a fact that every $Q$
function for some policy obeys the Bellman equation:

\begin{align}Q^{\pi}(s, a) = r + \gamma Q^{\pi}(s', \pi(s'))\end{align}

The difference between the two sides of the equality is known as the
temporal difference error, $\delta$:

\begin{align}\delta = Q(s, a) - (r + \gamma \max_a Q(s', a))\end{align}

To minimise this error, we will use the `Huber
loss <https://en.wikipedia.org/wiki/Huber_loss>`__. The Huber loss acts
like the mean squared error when the error is small, but like the mean
absolute error when the error is large - this makes it more robust to
outliers when the estimates of $Q$ are very noisy. We calculate
this over a batch of transitions, $B$, sampled from the replay
memory:

\begin{align}\mathcal{L} = \frac{1}{|B|}\sum_{(s, a, s', r) \ \in \ B} \mathcal{L}(\delta)\end{align}

\begin{align}\text{where} \quad \mathcal{L}(\delta) = \begin{cases}
     \frac{1}{2}{\delta^2}  & \text{for } |\delta| \le 1, \\
     |\delta| - \frac{1}{2} & \text{otherwise.}
   \end{cases}\end{align}

Q-network
^^^^^^^^^

Our model will be a convolutional neural network that takes in the
difference between the current and previous screen patches. It has two
outputs, representing $Q(s, \mathrm{left})$ and
$Q(s, \mathrm{right})$ (where $s$ is the input to the
network). In effect, the network is trying to predict the *expected return* of
taking each action given the current input.



"""

#  DQN(screen_height, screen_width, n_actions).to(device)

class DQN(nn.Module):

    def __init__(self, inputDim, outputs):
        super(DQN, self).__init__()
#         self.conv1 = nn.Conv2d(3, 16, kernel_size=5, stride=2)
#         self.bn1 = nn.BatchNorm2d(16)
#         self.conv2 = nn.Conv2d(16, 32, kernel_size=5, stride=2)
#         self.bn2 = nn.BatchNorm2d(32)
#         self.conv3 = nn.Conv2d(32, 32, kernel_size=5, stride=2)
#         self.bn3 = nn.BatchNorm2d(32)

#         # Number of Linear input connections depends on output of conv2d layers
#         # and therefore the input image size, so compute it.
#         def conv2d_size_out(size, kernel_size = 5, stride = 2):
#             return (size - (kernel_size - 1) - 1) // stride  + 1
#         convw = conv2d_size_out(conv2d_size_out(conv2d_size_out(w)))
#         convh = conv2d_size_out(conv2d_size_out(conv2d_size_out(h)))
#         linear_input_size = convw * convh * 32
#         self.head = nn.Linear(linear_input_size, outputs)
        self.l1 = nn.Linear(inputDim, 12)
#         self.l2 = nn.Linear(6, 6)
#         self.l3 = nn.Linear(8, 16)
        self.l4 = nn.Linear(12, 3)
        self.l5 = nn.Linear(3, outputs)

    # Called with either one element to determine next action, or a batch
    # during optimization. Returns tensor([[left0exp,right0exp]...]).
    def forward(self, x):
        
        x = x.to(device)
        x = F.relu(self.l1(x))
#         x = F.relu(self.l2(x))
#         x = F.relu(self.l3(x))
        x = F.relu(self.l4(x))
        x = F.relu(self.l5(x))
        return x
        
#         x = x.to(device)
#         x = F.relu(self.bn1(self.conv1(x)))
#         x = F.relu(self.bn2(self.conv2(x)))
#         x = F.relu(self.bn3(self.conv3(x)))
#         return self.head(x.view(x.size(0), -1))

"""Input extraction
^^^^^^^^^^^^^^^^

The code below are utilities for extracting and processing rendered
images from the environment. It uses the ``torchvision`` package, which
makes it easy to compose image transforms. Once you run the cell it will
display an example patch that it extracted.



"""

resize = T.Compose([T.ToPILImage(),
                    T.Resize(40, interpolation=Image.CUBIC),
                    T.ToTensor()])

def get_params():
    return env.state # np.array([env.buffer, env.buffer_limit - env.buffer, env.throughput_trace[(len(env.throughput_trace)+env.download_chunk_id-1)%len(env.throughput_trace)]])

def get_cart_location(screen_width):
    world_width = env.x_threshold * 2
    scale = screen_width / world_width
    return int(env.state[0] * scale + screen_width / 2.0)  # MIDDLE OF CART

def get_screen():
    ;
    # Returned screen requested by gym is 400x600x3, but is sometimes larger
    # such as 800x1200x3. Transpose it into torch order (CHW).
#     screen = env.render(mode='rgb_array').transpose((2, 0, 1))
#     # Cart is in the lower half, so strip off the top and bottom of the screen
#     _, screen_height, screen_width = screen.shape
#     screen = screen[:, int(screen_height*0.4):int(screen_height * 0.8)]
#     view_width = int(screen_width * 0.6)
#     cart_location = get_cart_location(screen_width)
#     if cart_location < view_width // 2:
#         slice_range = slice(view_width)
#     elif cart_location > (screen_width - view_width // 2):
#         slice_range = slice(-view_width, None)
#     else:
#         slice_range = slice(cart_location - view_width // 2,
#                             cart_location + view_width // 2)
#     # Strip off the edges, so that we have a square image centered on a cart
#     screen = screen[:, :, slice_range]
#     # Convert to float, rescale, convert to torch tensor
#     # (this doesn't require a copy)
#     screen = np.ascontiguousarray(screen, dtype=np.float32) / 255
#     screen = torch.from_numpy(screen)
#     # Resize, and add a batch dimension (BCHW)
#     return resize(screen).unsqueeze(0)


# env.reset()
plt.figure()
# plt.imshow(get_screen().cpu().squeeze(0).permute(1, 2, 0).numpy(),
#            interpolation='none')
plt.title('Example extracted screen')
plt.show()

"""Training
--------

Hyperparameters and utilities
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This cell instantiates our model and its optimizer, and defines some
utilities:

-  ``select_action`` - will select an action accordingly to an epsilon
   greedy policy. Simply put, we'll sometimes use our model for choosing
   the action, and sometimes we'll just sample one uniformly. The
   probability of choosing a random action will start at ``EPS_START``
   and will decay exponentially towards ``EPS_END``. ``EPS_DECAY``
   controls the rate of the decay.
-  ``plot_durations`` - a helper for plotting the durations of episodes,
   along with an average over the last 100 episodes (the measure used in
   the official evaluations). The plot will be underneath the cell
   containing the main training loop, and will update after every
   episode.



"""

BATCH_SIZE = 128
GAMMA = 0.999
EPS_START = 0.9
EPS_END = 0.05
EPS_DECAY = 200
TARGET_UPDATE = 10

# Get screen size so that we can initialize layers correctly based on shape
# returned from AI gym. Typical dimensions at this point are close to 3x40x90
# which is the result of a clamped and down-scaled render buffer in get_screen()
# init_screen = get_screen()
# _, _, screen_height, screen_width = init_screen.shape

# Get number of actions from gym action space
# n_actions = env.action_space.n
n_actions = len(env.action_space)
state_dim = len(env.state)
policy_net = DQN(state_dim, n_actions).to(device)
target_net = DQN(state_dim, n_actions).to(device)


# policy_net = DQN(screen_height, screen_width, n_actions).to(device)
# target_net = DQN(screen_height, screen_width, n_actions).to(device)
target_net.load_state_dict(policy_net.state_dict())
target_net.eval()

optimizer = optim.RMSprop(policy_net.parameters())
memory = ReplayMemory(10000)


steps_done = 0


def select_action(state):
    global steps_done
    sample = random.random()
    eps_threshold = EPS_END + (EPS_START - EPS_END) * \
        math.exp(-1. * steps_done / EPS_DECAY)
    steps_done += 1
    if sample > eps_threshold:
        with torch.no_grad():
            # t.max(1) will return largest column value of each row.
            # second column on max result is index of where max element was
            # found, so we pick action with the larger expected reward.
            return torch.tensor([[policy_net(state).argmax().item()]], device=device, dtype=torch.long)
#             return policy_net(state).max(1)[1].view(1, 1)
    else:
        return torch.tensor([[random.randrange(n_actions)]], device=device, dtype=torch.long)


episode_durations = []


def plot_durations():
    plt.figure(2)
    plt.clf()
    durations_t = torch.tensor(episode_durations, dtype=torch.float)
    plt.title('Training...')
    plt.xlabel('Episode')
    plt.ylabel('Duration')
    plt.plot(durations_t.numpy())
    # Take 100 episode averages and plot them too
    if len(durations_t) >= 100:
        means = durations_t.unfold(0, 100, 1).mean(1).view(-1)
        means = torch.cat((torch.zeros(99), means))
        plt.plot(means.numpy())

    plt.pause(0.001)  # pause a bit so that plots are updated
    if is_ipython:
        display.clear_output(wait=True)
        display.display(plt.gcf())

"""Training loop
^^^^^^^^^^^^^

Finally, the code for training our model.

Here, you can find an ``optimize_model`` function that performs a
single step of the optimization. It first samples a batch, concatenates
all the tensors into a single one, computes $Q(s_t, a_t)$ and
$V(s_{t+1}) = \max_a Q(s_{t+1}, a)$, and combines them into our
loss. By definition we set $V(s) = 0$ if $s$ is a terminal
state. We also use a target network to compute $V(s_{t+1})$ for
added stability. The target network has its weights kept frozen most of
the time, but is updated with the policy network's weights every so often.
This is usually a set number of steps but we shall use episodes for
simplicity.



"""

# transitions = memory.sample(BATCH_SIZE)
# # Transpose the batch (see https://stackoverflow.com/a/19343/3343043 for
# # detailed explanation). This converts batch-array of Transitions
# # to Transition of batch-arrays.
# batch = Transition(*zip(*transitions))
# batch.state

#     transitions = memory.sample(BATCH_SIZE)
#     # Transpose the batch (see https://stackoverflow.com/a/19343/3343043 for
#     # detailed explanation). This converts batch-array of Transitions
#     # to Transition of batch-arrays.
#     batch = Transition(*zip(*transitions))

#     # Compute a mask of non-final states and concatenate the batch elements
#     # (a final state would've been the one after which simulation ended)
#     non_final_mask = torch.tensor(tuple(map(lambda s: s is not None,
#                                           batch.next_state)), device=device, dtype=torch.bool)
#     non_final_next_states = torch.cat([s for s in batch.next_state
#                                                 if s is not None])
#     state_batch = torch.cat(batch.state)
#     action_batch = torch.cat(batch.action)
#     reward_batch = torch.cat(batch.reward)

#     # Compute Q(s_t, a) - the model computes Q(s_t), then we select the
#     # columns of actions taken. These are the actions which would've been taken
#     # for each batch state according to policy_net
#     state_action_values = policy_net(state_batch.resize( len(state_batch)//3, 3)).gather(1, action_batch)

# state_action_values

#     transitions = memory.sample(BATCH_SIZE)
#     # Transpose the batch (see https://stackoverflow.com/a/19343/3343043 for
#     # detailed explanation). This converts batch-array of Transitions
#     # to Transition of batch-arrays.
#     batch = Transition(*zip(*transitions))

#     # Compute a mask of non-final states and concatenate the batch elements
#     # (a final state would've been the one after which simulation ended)
#     non_final_mask = torch.tensor(tuple(map(lambda s: s is not None,
#                                           batch.next_state)), device=device, dtype=torch.bool)
#     non_final_next_states = torch.cat([s for s in batch.next_state
#                                                 if s is not None])
#     state_batch = torch.cat(batch.state)
#     action_batch = torch.cat(batch.action)
#     reward_batch = torch.cat(batch.reward)

#     # Compute Q(s_t, a) - the model computes Q(s_t), then we select the
#     # columns of actions taken. These are the actions which would've been taken
#     # for each batch state according to policy_net
# #     state_action_values = policy_net(state_batch).gather(1, action_batch)
#     state_action_values = policy_net(state_batch.resize( len(state_batch)//3, 3)).gather(1, action_batch)

#     # Compute V(s_{t+1}) for all next states.
#     # Expected values of actions for non_final_next_states are computed based
#     # on the "older" target_net; selecting their best reward with max(1)[0].
#     # This is merged based on the mask, such that we'll have either the expected
#     # state value or 0 in case the state was final.
#     next_state_values = torch.zeros(BATCH_SIZE, device=device)
# #     next_state_values[non_final_mask] = target_net(non_final_next_states).max(1)[0].detach()
#     next_state_values[non_final_mask] = target_net(non_final_next_states.resize( len(state_batch)//3, 3)).max(1)[0].detach()
#     # Compute the expected Q values
#     expected_state_action_values = (next_state_values * GAMMA) + reward_batch

#     # Compute Huber loss
#     criterion = nn.SmoothL1Loss()
#     loss = criterion(state_action_values, expected_state_action_values.unsqueeze(1))

#     # Optimize the model
#     optimizer.zero_grad()
#     loss.backward()
#     for param in policy_net.parameters():
#         param.grad.data.clamp_(-1, 1)
#     optimizer.step()

# target_net(non_final_next_states.resize( len(state_batch)//3, 3)).max(1)[0].detach()

# batch.action

def optimize_model():
    if len(memory) < BATCH_SIZE:
        return
    transitions = memory.sample(BATCH_SIZE)
    # Transpose the batch (see https://stackoverflow.com/a/19343/3343043 for
    # detailed explanation). This converts batch-array of Transitions
    # to Transition of batch-arrays.
    batch = Transition(*zip(*transitions))

    # Compute a mask of non-final states and concatenate the batch elements
    # (a final state would've been the one after which simulation ended)
    non_final_mask = torch.tensor(tuple(map(lambda s: s is not None,
                                          batch.next_state)), device=device, dtype=torch.bool)
    non_final_next_states = torch.cat([s for s in batch.next_state
                                                if s is not None])
    state_batch = torch.cat(batch.state)
    action_batch = torch.cat(batch.action)
    reward_batch = torch.cat(batch.reward)

    # Compute Q(s_t, a) - the model computes Q(s_t), then we select the
    # columns of actions taken. These are the actions which would've been taken
    # for each batch state according to policy_net
#     state_action_values = policy_net(state_batch).gather(1, action_batch)
    state_action_values = policy_net(state_batch.resize( len(state_batch)//state_dim, state_dim)).gather(1, action_batch)

    # Compute V(s_{t+1}) for all next states.
    # Expected values of actions for non_final_next_states are computed based
    # on the "older" target_net; selecting their best reward with max(1)[0].
    # This is merged based on the mask, such that we'll have either the expected
    # state value or 0 in case the state was final.
    next_state_values = torch.zeros(BATCH_SIZE, device=device)
#     next_state_values[non_final_mask] = target_net(non_final_next_states).max(1)[0].detach()
    next_state_values[non_final_mask] = target_net(non_final_next_states.resize( len(non_final_next_states)//state_dim, state_dim)).max(1)[0].detach()
    # Compute the expected Q values
    expected_state_action_values = (next_state_values * GAMMA) + reward_batch

    # Compute Huber loss
    criterion = nn.SmoothL1Loss()
    loss = criterion(state_action_values, expected_state_action_values.unsqueeze(1))

    # Optimize the model
    optimizer.zero_grad()
    loss.backward()
    for param in policy_net.parameters():
        param.grad.data.clamp_(-1, 1)
    optimizer.step()

"""Below, you can find the main training loop. At the beginning we reset
the environment and initialize the ``state`` Tensor. Then, we sample
an action, execute it, observe the next screen and the reward (always
1), and optimize our model once. When the episode ends (our model
fails), we restart the loop.

Below, `num_episodes` is set small. You should download
the notebook and run lot more epsiodes, such as 300+ for meaningful
duration improvements.



"""

# state

# Commented out IPython magic to ensure Python compatibility.
from matplotlib import pyplot as plt
from IPython.display import clear_output
# %matplotlib inline

def subplot(R, P):
    clear_output(wait=True)
    
    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(20, 8))

    ax[0].plot(range(0, len(R)), R, 'r') #row=0, col=0
    ax[1].plot(range(0, len(P)), P, 'g') #row=0, col=0
    ax[0].title.set_text('Reward')
    ax[1].title.set_text('psnr')
    plt.show()

import pandas as pd
rewards = []
print_running_reward = 0
print_running_episodes = 1
psnr = []
psnrs = []
rrs = []
rr = []
plot_rewards = []

num_episodes = 1000
for i_episode in tqdm(range(num_episodes)):
    rewards_ep = []
    # Initialize the environment and state
    env.reset()
#     last_screen = get_screen()
#     current_screen = get_screen()
#     state = current_screen - last_screen
    

    state = get_params()
    state = torch.FloatTensor(state)
    
    for t in count():
        # Select and perform an action
        action = select_action(state)
        # print(action)
        _, reward, ret_reward, ret_psnr, tn , rn, done = env.step(action.item())

#         _, reward, done, _ = env.step(action)
        psnr.append(ret_psnr)
        rewards_ep.append(reward)
        rr += [ret_reward]
        reward = torch.tensor([reward], device=device)
#         print(reward.item())
        
        # Observe new state
#         last_screen = current_screen
#         current_screen = get_screen()
        if not done:
            next_state = torch.FloatTensor(get_params())
        else:
            next_state = None

        # Store the transition in memory
        memory.push(state, action, next_state, reward)

        # Move to the next state
        state = next_state
        rewards_ep[len(rewards_ep) - 1] = (ret_reward)
        # Perform one step of the optimization (on the policy network)
        optimize_model()
        if done:
            episode_durations.append(t + 1)
#             plot_durations()
            break
    
        rewards.append(np.mean(rewards_ep))
        # print_running_reward += reward.item()
        print_running_reward += ret_reward
        # print(ret_reward)
        print_running_episodes += 1
        
    print_avg_reward = print_running_reward / print_running_episodes
    print_avg_reward = round(print_avg_reward, 2)
    plot_rewards.append(print_avg_reward)
    psnrs.append(np.mean(psnr))
    rrs.append(np.mean(rr))

    print_running_reward = 0
    print_running_episodes = 0
    psnr = []
    rr = []
    
    # plot_rewards = pd.DataFrame(plot_rewards)
    plot_rewards = pd.DataFrame(rrs)
    plot_rewards.columns = ['plot_rewards']
    plot_rewards['psnr'] = psnrs
    plot_rewards = plot_rewards[plot_rewards['plot_rewards'] > -100]
    psnrs = list(plot_rewards['psnr'])
    plot_rewards = list(plot_rewards['plot_rewards'])
    

    subplot(plot_rewards, psnrs)
    # Update the target network, copying all weights and biases in DQN
    if i_episode % TARGET_UPDATE == 0:
        
        target_net.load_state_dict(policy_net.state_dict())
        
    

print('Complete')
# env.render()
# env.close()
# plt.ioff()
# plt.show()

env.state

4 ** 0.5

np.mean(rewards_ep)

plt.plot(rewards)

"""Here is the diagram that illustrates the overall resulting data flow.

.. figure:: /_static/img/reinforcement_learning_diagram.jpg

Actions are chosen either randomly or based on a policy, getting the next
step sample from the gym environment. We record the results in the
replay memory and also run optimization step on every iteration.
Optimization picks a random batch from the replay memory to do training of the
new policy. "Older" target_net is also used in optimization to compute the
expected Q values; it is updated occasionally to keep it current.



"""

# batch

subplot(plot_rewards, psnrs)

